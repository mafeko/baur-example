
# Name of the application
name = "myredis"

[[Task]]

  # Identifies the task, currently the name must be 'build'.
  name = "build"

  # Command to execute. The command is run via the sh shell.
  command = "docker build --iidfile .container.id ."

  # Specification of task inputs like source files, Makefiles, etc
  [Task.Input]

    # Inputs specified by path, matching only Git tracked files
    [Task.Input.GitFiles]

      # Relative paths to source files.
      # Only files tracked by Git that are not in the .gitignore file are matched.
      # The same patterns that git ls-files supports can be used.
      # Valid variables: $ROOT, $APPNAME.
      paths = ["Dockerfile"]

  # Specification of task outputs produced by the Task.command
  [Task.Output]

    [[Task.Output.DockerImage]]

      # Path to a file that is created by the [Task.Command] and contains the image ID of the produced image (docker build --iidfile).
      # Valid variables: $ROOT, $APPNAME
      idfile = ".container.id"

      # Registry and repository the image is uploaded to
      [Task.Output.DockerImage.RegistryUpload]

        # Registry address in the format <HOST>:[<PORT>]. If it's empty the default from the docker agent is used.
        registry = "localhost:5000"

        # Repository name, Valid variables: $APPNAME
        repository = "baur-example/$APPNAME"

        # Tag that is applied to the image.
        # Valid variables: $APPNAME, $UUID, $GITCOMMIT
        tag = "$GITCOMMIT"
